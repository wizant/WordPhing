<?xml version="1.0" encoding="UTF-8"?>

<project name="Build a WordPress Install" default="help" basedir="./">

    <!-- Default property values -->
    <property name="build.wp.version" value="latest" />

    <!-- Load the configuration file -->
    <property file="build.properties" override="true"/>
    
    <!-- set a temp dirs -->
    <property name="build.dir.tmp" value="${build.dir.wp}/tmp"/>
    <property name="build.dir.tmp.plugins" value="${build.dir.tmp}/plugins"/>
    <property name="build.dir.tmp.themes" value="${build.dir.tmp}/themes"/>

	<tstamp>
		<!-- Format is, e.g. Sat, 03 Oct 2009, 16:31 -->
		<format property="buildtime" pattern="${build.dt.buildformat}"/>
		<format property="filestamp" pattern="${build.dt.fileformat}"/>

	</tstamp>

	<!-- Create the database -->
	<!-- Errors are handled by mySQL 
************************************************************** -->

	<target name="database">
	    <taskdef name="pdosqlexec" classname="phing.tasks.ext.pdo.PDOSQLExecTask"/>
	    <pdosqlexec url="${build.db.url}"
	                userid="${build.db.userid}"
	                password="${build.db.password}"
	                onerror="abort"
	                autocommit="true">
	        CREATE DATABASE ${build.db.name};
	    </pdosqlexec>        
	</target>

  <target name="clean-database">
      <taskdef name="pdosqlexec" classname="phing.tasks.ext.pdo.PDOSQLExecTask" />
      <pdosqlexec url="${build.db.url}"
                  userid="${build.db.userid}"
                  password="${build.db.password}"
                  onerror="abort"
                  autocommit="true">
          DROP DATABASE ${build.db.name};
      </pdosqlexec>
  </target>

    <!-- Prepare the build directory 
************************************************************** -->

   <!--  <target name="prepare" depends="clean" description="Creating new WordPress directory"> -->
   <target name="prepare"  description="Creating new WordPress directory">
     <echo msg="Preparing build directory" />
     <!--  build now will not overwrite existing directories -->
     <available file="${build.dir.wp}" type="dir" property="dirfound" value="true"/>
     <fail if="dirfound" message="This directory already exists!" />

     <!-- create our root location -->
     <mkdir dir="${build.dir.wp}" />

     <!-- create temp directories for downloads -->
     <mkdir dir="${build.dir.tmp}" />
     <mkdir dir="${build.dir.tmp.plugins}" />
     <mkdir dir="${build.dir.tmp.themes}" />
    </target>

    <!-- Download WordPress from .org 
************************************************************* -->
	<target name="installwordpress" description="Download WordPress">

		<!-- download our wordpress zip -->
		<httpget url="${build.download.wp.url}" dir="${build.dir.tmp}" />

		<!-- unzip wordpress - unable to extract to same dir -->
		<untar todir="${build.dir.tmp.plugins}" >
			<fileset dir="${build.dir.tmp}">
				<include name="*.tar.gz"/>
			</fileset>
		</untar>

		<!-- move to dest  -->
		<copy todir="${build.dir.wp}" includeemptydirs="true">

			<fileset dir="${build.dir.tmp.plugins}/wordpress" >
			  <include name="**" />
			</fileset>
  
		</copy>

    </target>

    <!-- Download WordPress Plugins 
************************************************************* -->

	<target name="downloadplugin" description="Download WordPress Plugin">

		<!-- download our plugin zip :: note this expects a standard wordpress packaged plugin file -->
		<httpget url="${wppluginurl}" dir="${build.dir.tmp.plugins}" />

    </target>
    
   
    <!-- Loop over properties list of wp plugins to install 
************************************************************* -->
	<target name="installplugins" description="Download Plugins" >

		<!-- TODO - add a file of newline delimited plugin urls -->

		<!-- defined via properties file -->
		<foreach list="${build.download.plugin.urls}" param="wppluginurl" target="downloadplugin" />

		<!-- unzip our collection of plugins -->
		<unzip todir="${build.dir.wp}/wp-content/plugins" >
			<fileset dir="${build.dir.tmp.plugins}">
				<include name="*.zip"/>
			</fileset>
		</unzip>

		<!-- clean up zip files -->
		<delete>
			<fileset dir="${build.dir.tmp.plugins}">
				<include name="*.zip"/>
			</fileset>
		</delete>

	</target>

	<!-- Download WordPress Themes 
************************************************************* -->
	<target name="downloadtheme" description="Download WordPress Themes">

		<!-- download our plugin zip :: note this expects a standard wordpress packaged plugin file -->
		<httpget url="${wpthemeurl}" dir="${build.dir.tmp.themes}" />

	</target>
    
   
    <!-- Loop over properties list of wp themes to install 
*************************************************************  -->
	<target name="installthemes" description="Install themes" >

		<!-- TODO - add a file of newline delimited plugin urls -->

		<!-- defined via properties file -->
		<foreach list="${build.download.themes.urls}" param="wpthemeurl" target="downloadtheme" />

		<!-- unzip our collection of plugins -->
		<unzip todir="${build.dir.wp}/wp-content/themes" >
			<fileset dir="${build.dir.tmp.themes}">
				<include name="*.zip"/>
			</fileset>
		</unzip>

		<!-- clean up zip files -->
		<delete>
			<fileset dir="${build.dir.tmp.themes}">
				<include name="*.zip"/>
			</fileset>
		</delete>

	</target>

<!-- Update the wp-config.php file
*************************************************************  -->

	<target name="updatewpconfig">

		<!-- append needed settings to wp-config.php file -->
		<if>
			<isset property="build.db.name"/>
			<then>

				<echo msg="Adding db connection info to wp-config.php" />

				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replaceregexp>
							<regexp pattern="(define\('DB_NAME', ')\w+('\);)" replace="\1${build.db.name}\2"/>
							<regexp pattern="(define\('DB_USER', ')\w+('\);)" replace="\1${build.db.userid}\2"/>
							<regexp pattern="(define\('DB_PASSWORD', ')\w+('\);)" replace="\1${build.db.password}\2"/>
							<regexp pattern="(define\('DB_HOST', ')\w+('\);)" replace="\1${build.db.wp.host}\2"/>
						</replaceregexp>
					</filterchain>
				</reflexive>

			</then>
		</if>

		<!-- append additional files to wp-config.php file -->
		<if>
			<isset property="build.wp.config.append.filename"/>
			<then>

				<echo msg="Adding external configs to wp-config.php" />

				<!-- a token exists around the salt keys - lets find/replace/add for next step - hookie -->
				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replaceregexp>
							<regexp pattern="(\/**#@-*\/)" replace="\1 ${line.separator}${line.separator} #!${build.wp.config.append.filename}!##"/>
						</replaceregexp>
					</filterchain>
				</reflexive>

			</then>
		</if>

		<!-- enable debug mode to wp-config.php file -->
		<if>
			<isset property="build.wp.config.debug"/>
			<then>

				<echo msg="Setting WP_DEBUG in wp-config.php" />

				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replaceregexp>
							<regexp pattern="(define\('WP_DEBUG', )\w+(\);)" replace="\1true\2"/>
						</replaceregexp>
					</filterchain>
				</reflexive>

			</then>
		</if>

		<!-- enable SAVEQUERIES debug to wp-config.php file -->
		<!-- this needs to be appended to the above to look cleaner -->
		<if>
			<isset property="build.wp.config.savequeries"/>
			<then>

				<echo msg="Setting SAVEQUERIES in wp-config.php" />

				
				<append destFile="${build.dir.wp}/wp-config.php" text="${line.separator} define('SAVEQUERIES', ${build.wp.config.savequeries} ); ${line.separator}" />
					

			</then>
		</if>		

		<!-- replace the wp_ db prefix -->
		<if>
			<isset property="build.wp.config.db.prefix"/>
			<then>

				<echo msg="Adding db prefix to wp-config.php" />

				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replaceregexp>
							<regexp pattern="((\w+)  = 'wp_';)" replace="\2 = '${build.wp.config.db.prefix}';"/>
						</replaceregexp>
					</filterchain>
				</reflexive>

			</then>
		</if>

		<!-- TODO - download salt api https://api.wordpress.org/secret-key/1.1/salt/ and inject - wp-config already contains tokens around salt section -->

		<!-- TODO - we could download a lang here and change wplang settings -->


		<!-- append additional settings to wp-config.php file -->

		<if>
			<isset property="build.wp.config.append.filename"/>
			<then>

				<echo msg="Appending ${build.wp.config.append.filename} to wp-config.php" />

				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replacetokenswithfile begintoken="#!" endtoken="##" />
					</filterchain>
				</reflexive>

			</then>
		</if>

	</target>

 	<!-- Delete temp dir !-->
    <target name="cleantmp" description="Deletes tmp directory needed for install">

        <echo msg="Cleaning tmp directory" />
        
        <!-- remove temp location -->
        <delete dir="${build.dir.tmp}" includeemptydirs="true" failonerror="true" />
        
    </target>


<!-- Bypass the wordpress installer defines global ABSPATH/Version to prevent errors.
###############################################  -->

<target name="wpconfig">
<foo/>
</target>

		
<adhoc-task name="foo"><![CDATA[
	class BarTask extends Task {
          
        public function main() {

	        define( 'ABSPATH', '${build.dir.wp}' . '/');
	          
	        $base_dir = '${build.dir.wp}';
	        define('WP_SITEURL', '${build.dir.actual}');
	        define('WP_INSTALLING', true);

	        require_once('${build.dir.wp}/wp-load.php');
	        require_once('${build.dir.wp}/wp-admin/includes/upgrade.php');
	        require_once('${build.dir.wp}/wp-includes/wp-db.php');

	          
	        $public = true;
	        $result = wp_install( '${build.wp.title}', '${build.wp.user}', '${build.wp.email}', $public, '', '${build.wp.password}' );

	        //we need to update the db version for some reason
	          update_option( 'db_version', $wp_db_version );

	        //remove Hello Dolly 
	          delete_plugins(array('hello.php'));

	        //remove default hello world post
	          wp_delete_post(1,true);

	        //remove default sample page
	          wp_delete_post(2,true);

	        //remove default Mr.Wordpress comment
	          wp_delete_comment( 1, true ) ;

	        //remove default links
	          $arr_args = array( 'hide_invisible' => 0 );
			  $arr_links = get_bookmarks( $arr_args );

			  // Run through the list and delete 'em
			  foreach($arr_links as $obj_link) {
	   		     wp_delete_link($obj_link->link_id);
	        }
        }
    }
          

          ]]>
</adhoc-task>


	<target name="delete-readme" description="Deletes readme and wp-config-sample">

        <echo msg="deleting readme.html and wp-config-sample.php" />
        
        <delete file="${build.dir.wp}/readme.html" />
        <delete file="${build.dir.wp}/wp-config-sample.php" />
        
	</target>

<!-- Tarballs  
*************************************************************  -->

    <!-- zip -->
	<target name="zip-it">

		<!-- zip it -->
		<zip destfile="${build.wp.tarball.location}/${build.wp.tarball.name}.zip" basedir="${build.wp.tarball.send}"/>
	</target>

	<!-- tar gzip -->

	<target name="gzip-it">

		<!-- gzip it, can change compression to bzip2, check phing docs-->
		<tar destfile="${build.wp.tarball.location}/${build.wp.tarball.name}.tar.gz" compression="gzip" basedir="${build.wp.tarball.send}"/>
	</target>


<!-- PHP Documentor 2 
# http://www.phpdoc.org/
*************************************************************  -->
<target name="doc-it">

	<!-- dir to hold the doc files, set to .php by default -->
	<mkdir dir="${build.wp.doc.output}" />

	<phpdoc2 title="${build.wp.docs.name}"
	  destdir="${build.wp.doc.output}"
	  template="responsive">
	   <fileset dir="${build.wp.docs.dir}">
	      <include name="**/*.php" />
	   </fileset>
	</phpdoc2>

</target>


<!-- jsMin
#  https://github.com/rgrove/jsmin-php/
*************************************************************  -->

<target name="min-it">
	<jsMin targetDir="${build.wp.jsm.output}" failOnError="false">
	  <fileset dir="${build.wp.jsmin.dir}">
	    <include name="**/*.js"/>
	  </fileset>
	</jsMin>
</target>


	<!-- Our main installer * This will install the DB and WordPress
************************************************************* -->

	<target name="wp-install" depends="prepare">

		<phingcall target="database" />

		<echo msg="Created a new database" />
		
		<phingcall target="installwordpress" />
			
        <echo msg="Copying wp-config.php" />

		<copy file="${build.dir.wp}/wp-config-sample.php" tofile="${build.dir.wp}/wp-config.php" />

		<!-- overwrite values in wp-config.php -->
		<phingcall target="updatewpconfig" />

		<!-- install additional wp plugins -->
		<if>
			<isset property="build.download.plugin.urls"/>
			<then>

				<phingcall target="installplugins" />

				<echo msg="Installing plugins" />

			</then>
		</if>

			<!-- install additional wp thems -->
		<if>
			<isset property="build.download.themes.urls"/>
			<then>

				<phingcall target="installthemes" />

				<echo msg="Installing themes" />

			</then>
		</if>

		
    <!--  Permissions - every system is different - customize this based on your environment.
          this won't work on windows 
    
          <chown file="${build.dir.wp}" user="www-data.www-data" verbose="true" />
          <chmod file="${build.dir.wp}" mode="0755" verbose="true" /> 
    -->    

        <!-- just a timestamp in wp-config.php -->
        <append destFile="${build.dir.wp}/wp-config.php" text="${line.separator}${line.separator}/* WordPhing'd this install on ${buildtime} */${line.separator}" />

        <phingcall target="wpconfig" />

        <echo msg="Installing Wordpress" />

        <phingcall target="cleantmp" />

        <phingcall target="delete-readme" />

       <echo msg="All done" />

	</target>


		<!-- WordPress only installer * This will install WordPress (not the DB)
*************************************************************- -->

	<target name="wp-install-only" depends="prepare">

		<!-- if this is a standard wordpress.org build -->

		<phingcall target="installwordpress" />
			
        <echo msg="Copying wp-config.php" />

		<copy file="${build.dir.wp}/wp-config-sample.php" tofile="${build.dir.wp}/wp-config.php" />

		<!-- overwrite values in wp-config.php -->
		<phingcall target="updatewpconfig" />

		<!-- install additional wp plugins -->
		<if>
			<isset property="build.download.plugin.urls"/>
			<then>

				<phingcall target="installplugins" />

				<echo msg="Installing plugins" />

			</then>
		</if>

			<!-- install additional wp thems -->
		<if>
			<isset property="build.download.themes.urls"/>
			<then>

				<phingcall target="installthemes" />

				<echo msg="Installing themes" />

			</then>
		</if>

		
    <!--  Permissions - every system is different - customize this based on your environment.
          this won't work on windows 
    
          <chown file="${build.dir.wp}" user="www-data.www-data" verbose="true" />
          <chmod file="${build.dir.wp}" mode="0755" verbose="true" /> 
    -->    

        <!-- just a timestamp in wp-config.php -->
        <append destFile="${build.dir.wp}/wp-config.php" text="${line.separator}${line.separator}/* WordPhing'd this install on ${buildtime} */${line.separator}" />

        <phingcall target="wpconfig" />

        <echo msg="Installing Wordpress" />

        <phingcall target="cleantmp" />

       <echo msg="All done" />

	</target>

  <target name="wp-clean">
    <phingcall target="clean-database" />
    <delete dir="${build.dir.wp}" includeemptydirs="true" />
	</target>


		<!-- Tarball calls
*************************************************************- -->
    <target name="wp-zip">
		<phingcall target="zip-it" />
	</target>

 <target name="wp-gzip">
		<phingcall target="gzip-it" />
	</target>


		<!-- PHP Documentor 2
*************************************************************- -->
    <target name="wp-doc">
		<phingcall target="doc-it" />
	</target>

		<!-- JsMin
*************************************************************- -->
    <target name="wp-min-js">
		<phingcall target="min-it" />
	</target>


		<!-- FTP
*************************************************************- -->

<target name="wp-ftp">
    <echo>Uploading files to FTP</echo>
    <ftpdeploy 
        host="${ftp.host}"
        port="${ftp.port}"
        username="${ftp.username}"
        password="${ftp.password}"
        dir="${ftp.dir}">
      <fileset dir="${ftp.source}"></fileset>
    </ftpdeploy>
    <echo>FTP Upload Finished!</echo>
</target>


    <!-- Display current build variables
************************************************************* -->

  <target name="get-env" description="Display current build variables">
    <echo msg="work dir:           ${application.startdir}" />
    <!-- echo msg="Environment variables, extracted from $_SERVER ${env.*}" / -->
    <echo msg="filesystem:         ${host.fstype}" />
    <echo msg="PHP_OS:             ${host.os}" />
    <!-- echo msg="Line separator: ${line.separator}" / -->
    <echo msg="OS:                 ${os.name}" />
    <echo msg="buildfile:          ${phing.file}" />
    <echo msg="phing dir:          ${phing.dir}" />
    <echo msg="phing home:         ${phing.home}" />
    <echo msg="phing version:      ${phing.version}" />
    <echo msg="phing project name: ${phing.project.name}" />
    <echo msg="PHP_CLASSPATH:      ${php.classpath}" />
    <echo msg="PHP_VERSION:        ${php.version}" />
    <echo msg="project basedir:    ${project.basedir}" />
    <echo msg="HOME:               ${user.home}" />
    <if>
        <equals arg1="${os.name}" arg2="Linux" />
        <then>
            <echo msg="---------- Linux --------------" />
            <echo msg="OS architecture:    ${host.arch}" />
            <echo msg="Domain name:        ${host.domain}" />
            <echo msg="OS hostname:        ${host.name}" />
            <echo msg="OS release version: ${host.os.release}" />
            <echo msg="OS version:         ${host.os.version}" />
        </then>
    </if>

    <echo msg="wordpress version:  ${build.wp.version}" />
  </target>

    <!-- Display the available options 
************************************************************* -->

    <target name="help" description="Displays the available options">

        <echo msg="Build options" />
        <echo msg="Please read the build.properties for more details" />
        <echo msg="------------------" />
        
        <echo msg="$ phing wp-install - Creates a new database, downloads and installs WordPress, Plugins and Themes" />
        <echo msg="$ phing wp-clean - Removes Wordpress instance installed" />
        <echo msg="$ phing wp-install-only - Downloads and installs WordPress, Plugins, Themes (no database setup)" />
        <echo msg="$ phing wp-zip - creates a zip "/>
        <echo msg="$ phing wp-gzip - creates a gzip "/>
        <echo msg="$ phing wp-doc - runs PHP Documentor 2"/>
        <echo msg="$ get-env - displays current environment variables" />
        
    </target>

</project>
